#BlueJ class context
comment0.target=Dataset
comment0.text=\r\n\ Class\ used\ to\ read\ ARFF\ files.\r\n\r\n\ @author\ Fernando\ Otero\r\n\ @version\ 1.0\r\n
comment1.params=encoding
comment1.target=boolean\ target(boolean[])
comment1.text=\r\n\ Returns\ the\ value\ of\ the\ target\ attribute.\r\n\ \r\n\ @param\ encoding\ the\ encoded\ rule/instance.\r\n\ \r\n\ @returns\ the\ value\ of\ the\ target\ attribute.\r\n
comment10.params=line
comment10.target=java.lang.String[]\ split(java.lang.String)
comment10.text=\r\n\ Divides\ the\ input\ String\ into\ tokens,\ using\ a\ white\ space\ as\ delimiter.\r\n\ \r\n\ @param\ line\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ String\ to\ be\ divided.\r\n\ \r\n\ @return\ an\ array\ of\ String\ representing\ the\ tokens.\r\n
comment2.params=rule\ instance
comment2.target=boolean\ covers(boolean[],\ boolean[])
comment2.text=\r\n\ Returns\ <code>true</code>\ if\ the\ rule\ covers\ the\ specified\ instance.\r\n\ \r\n\ @param\ rule\ the\ rule\ array.\r\n\ @param\ instance\ the\ instance\ array.\r\n\ \r\n\ @return\ <code>true</code>\ if\ the\ rule\ covers\ the\ instance;\ <code>false</code>\r\n\ \ \ \ \ \ \ \ \ otherwise.\r\n
comment3.params=encoded\ start\ length
comment3.target=int\ extractValue(boolean[],\ int,\ int)
comment4.params=rule
comment4.target=java.lang.String\ toString(boolean[])
comment5.params=input
comment5.target=read(java.lang.String)
comment5.text=\r\n\ Reads\ the\ specified\ input\ reader.\ The\ reader\ will\ be\ closed\ at\ the\ end\ of\r\n\ the\ method.\r\n\ \r\n\ @param\ input\r\n\ \ \ \ \ \ \ \ \ \ \ \ a\ reader.\r\n\ \r\n\ @return\ a\ <code>Dataset</code>\ instance\ contaning\ the\ contents\ of\ the\r\n\ \ \ \ \ \ \ \ \ input\ reader.\r\n\ \r\n\ @exception\ IOException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ an\ I/O\ error\ occurs.\r\n
comment6.params=components
comment6.target=void\ processAttribute(java.lang.String[])
comment6.text=\r\n\ Parses\ an\ attribute.\r\n\ \r\n\ @param\ dataset\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ dataset\ being\ read.\r\n\ @param\ components\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ components\ representing\ the\ attribute.\r\n
comment7.params=line\ length
comment7.target=boolean[]\ processInstance(java.lang.String,\ int)
comment7.text=\r\n\ Parses\ an\ instance\ and\ adds\ it\ to\ the\ current\ dataset.\r\n\ \r\n\ @param\ dataset\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ dataset\ being\ read.\r\n\ @param\ line\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ instance\ information.\r\n
comment8.params=line
comment8.target=boolean\ isComment(java.lang.String)
comment8.text=\r\n\ Checks\ if\ the\ line\ is\ a\ comment.\r\n\ \r\n\ @param\ line\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ line\ to\ be\ checked.\r\n\ \r\n\ @return\ <code>true</code>\ if\ the\ line\ is\ a\ comment;\ <code>false</code>\r\n\ \ \ \ \ \ \ \ \ otherwise.\r\n
comment9.params=value
comment9.target=java.lang.String\ trim(java.lang.String)
comment9.text=\r\n\ Removes\ spaces\ from\ the\ beginning\ and\ end\ of\ the\ string.\ This\ method\ will\r\n\ also\ remove\ single\ quotes\ usually\ created\ by\ WEKA\ discretisation\ process.\r\n\ \r\n\ @param\ value\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ string\ to\ trim.\r\n\ \r\n\ @return\ a\ string\ without\ spaces\ at\ the\ beginning\ and\ end.\r\n
numComments=11
